stages:
  - build

variables:
  IMAGE_NAME: "sdns-test"
  DOCKER_REGISTRY: "$CI_REGISTRY"
  DOCKER_TAG_LATEST: "latest"

build_and_push:
  image: docker:24.0.5
  stage: build
  services:
    - docker:24.0.5-dind
  before_script:
    # Install git untuk menangani peringatan buildx
    - apk add --no-cache git
    # Debug untuk memastikan `git` tersedia
    - git --version
    # Login ke GitLab Container Registry
    - echo "Logging into GitLab Container Registry..."
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - |
      if [ $? -ne 0 ]; then
        echo "Login failed, exiting pipeline."
        exit 1
      fi

  variables:
    DOCKER_CLI_EXPERIMENTAL: "enabled"

  script:
    # Debug untuk memastikan context
    - echo "Checking current directory..."
    - pwd
    - echo "Listing contents of current directory..."
    - ls -la

    # Tentukan versi image berdasarkan branch/tag
    - echo "Determining version..."
    - |
      if [ "$CI_COMMIT_BRANCH" == "master" ]; then
        VERSION=$DOCKER_TAG_LATEST
      elif [[ "$CI_COMMIT_TAG" =~ ^v ]]; then
        VERSION=$CI_COMMIT_TAG
      else
        echo "Unsupported ref: $CI_COMMIT_REF_NAME"
        exit 1
      fi
    - echo "Building image for version $VERSION..."

    # Siapkan QEMU untuk build multi-arch
    - echo "Setting up QEMU for multi-arch builds..."
    - docker run --rm --privileged docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64

    # Konfigurasi Docker Buildx
    - echo "Configuring Docker Buildx..."
    - docker buildx create --use
    - docker buildx inspect --bootstrap

    # Build dan push multi-arch Docker image
    - echo "Starting multi-arch build and push..."
    - |
      docker buildx build \
        --platform linux/arm64,linux/amd64 \
        --push \
        --tag $DOCKER_REGISTRY/$CI_PROJECT_NAMESPACE/$IMAGE_NAME:$VERSION \
        --tag $DOCKER_REGISTRY/$CI_PROJECT_NAMESPACE/$IMAGE_NAME:$DOCKER_TAG_LATEST \
        . || { echo "Docker build or push failed"; exit 1; }